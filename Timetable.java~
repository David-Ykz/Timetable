import java.util.HashMap;

public class Timetable {
	private final HashMap<Integer, Room> rooms;
    private final HashMap<Integer, Teacher> teachers;
    private final HashMap<Integer, Student> students;
    private final HashMap<String, Course> courses;
    private final HashMap<Integer, Group> groups;
    
    private Class classes[];
    
    private int numClasses = 0;

    Timetable() {
        this.rooms = new HashMap<Integer, Room>();
        this.teachers = new HashMap<Integer, Teacher>();
        this.students = new HashMap<Integer, Student>();
        this.courses = new HashMap<String, Course>();
        this.groups = new HashMap<Integer, Group>();
    }

    //makes a replica timetable
    Timetable(Timetable copy) {
        this.rooms = copy.getRooms();
        this.teachers = copy.getTeachers();
        this.students = copy.getStudents();
        this.courses = copy.getCourses();
        this.groups = copy.getGroups();
    }
    
    //getters
    private HashMap<Integer, Group> getGroups() {
        return this.groups;
    }
    
    public HashMap<String, Course> getCourses() {
        return this.courses;
    }
    
    private HashMap<Integer, Teacher> getTeachers() {
        return this.teachers;
    }
    
    public HashMap<Integer, Room> getRooms() {
        return this.rooms;
    }
    
    public HashMap<Integer, Student> getStudents() {
        return this.students;
    }
    
    public Teacher getTeacher(int teacherId) {
        return (Teacher) this.teachers.get(teacherId);
    }
    
    public Course getCourse(String string) {
        return (Course) this.courses.get(string);
    }
    
    public String getGroupCourse(int groupId) {
        Group group = (Group) this.groups.get(groupId);
        return group.getCourseCode();
    }

    public Group getGroup(int groupId) {
        return (Group) this.groups.get(groupId);
    }

    public Group[] getGroupsAsArray() {
        return (Group[]) this.groups.values().toArray(new Group[this.groups.size()]);
    }
    
    //adders/setters
    public void addRoom(int roomId, int roomNum, String roomName, String roomType) {
        this.rooms.put(roomId, new Room(roomId, roomNum, roomName, roomType));
    }
    
    public void addTeacher(int teacherId, String teacherName) {
        this.teachers.put(teacherId, new Teacher(teacherId, teacherName));
    }
    
    public void addStudent(int studentId, Student student) {
        this.students.put(studentId, student);
    }
    
    public void addCourse(String courseCode, Course course) {
        this.courses.put(courseCode, course);
    }
    
    public void addGroup(int groupId, String courseCode) {
        this.groups.put(groupId, new Group(groupId, courseCode));
        this.numClasses = 0;
    }
    
    public int getNumClasses() {
		return numClasses;
	}
    
    public Room getRandomRoom() {
    	Object[] roomsArray = this.rooms.values().toArray();
        Room room = (Room) roomsArray[(int) (roomsArray.length * Math.random())];
        return room;
	}
    
    public void createGroups() {
    	for (int i = 0; i < students.size(); i++) {
    		Student student = students.get(i);
    		String[] courseRequests = student.getCourseRequests();
    		
    		for (String course: courseRequests) {
    			for (Group availableGroup: this.getGroupsAsArray()) {
    				if (course.equals(availableGroup.getCourseCode()) == true) {
    					availableGroup.addStudent(student.getStudentId());
    				}
    				//adds a new group if the course did not already have an associated group
    				//or if the group is at max capacity
    				else {
    					this.addGroup(groups.size() + 1, course);
    				}
    			}
    		}
    	}    	
    }
    
    //creating classes from a chromosoe
    public void createClasses(Individual individual) {
        //initializes classes for the timetable
        Class classes[] = new Class[this.numClasses];
        
        // Get student's chromosome
        int chromosome[] = individual.getChromosome();
        int chromosomePos = 0;
        int classIndex = 0;
        
        for (Group group : this.getGroupsAsArray()) {
            String courseCode = group.getCourseCode();
            
            classes[classIndex] = new Class(classIndex, group.getGroupId(), courseCode);
            
            //period
            classes[classIndex].setPeriod(chromosome[chromosomePos]);
            chromosomePos++;
            
            //room
            classes[classIndex].setRoomId(chromosome[chromosomePos]);
            chromosomePos++;
            
            //teacher
            classes[classIndex].setTeacherId(chromosome[chromosomePos]);
            chromosomePos++;
            
            classIndex++;
        }
        this.classes = classes;
    }
    
    //-----------------------------------------ENTIRE METHOD IS SUBJECT TO CHANGE--------------------------------------------//
    /*
     * 
     * 
     * 
     */
    //-----------------------------------------------------------------------------------------------------------------------//
    public int calculateConflicts() {
        int conflicts = 0;
        
        for (Class classA : this.classes) {
//            // Check course capacity
//            int roomCapacity = this.getCourse(classA.getCourseId()).getCapacity();
//            int groupSize = this.getGroup(classA.getGroupId()).getGroupSize();
//            
//            if (roomCapacity < groupSize) {
//            	conflicts++;
//            }
            
            // Check if room is taken
            for (Class classB : this.classes) {
                if (classA.getRoomId() == classB.getRoomId() && classA.getPeriod() == classB.getPeriod()
                        && classA.getClassId() != classB.getClassId()) {
                	conflicts ++;
                    break;
                }
            }
            
            // Check if teacher is available
            for (Class classB : this.classes) {
                if (classA.getTeacherId() == classB.getTeacherId() && classA.getPeriod() == classB.getPeriod()
                        && classA.getClassId() != classB.getClassId()) {
                	conflicts++;
                    break;
                }
            }
        }
        
        return conflicts;
    }

}
